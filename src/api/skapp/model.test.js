import { Skapp } from '.'

let skapp

beforeEach(async () => {
  skapp = await Skapp.create({ version: 'test', skapp_id: 'test', skylink: 'test', title: 'test', filename: 'test', fileformat: 'test', description: 'test', type: 'test', directory: 'test', size: 'test', category: 'test', developer: 'test', blacklist: 'test', blacklist_date: 'test', skhub_blacklist: 'test', skhub_blacklist_date: 'test', portal: 'test', searchable: 'test', ratings: 'test', reviews: 'test', compatibility: 'test', languages: 'test', age_rating: 'test', price: 'test', app_support: 'test', git_url: 'test', auth_code: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = skapp.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(skapp.id)
    expect(view.version).toBe(skapp.version)
    expect(view.skapp_id).toBe(skapp.skapp_id)
    expect(view.skylink).toBe(skapp.skylink)
    expect(view.title).toBe(skapp.title)
    expect(view.filename).toBe(skapp.filename)
    expect(view.fileformat).toBe(skapp.fileformat)
    expect(view.description).toBe(skapp.description)
    expect(view.type).toBe(skapp.type)
    expect(view.directory).toBe(skapp.directory)
    expect(view.size).toBe(skapp.size)
    expect(view.category).toBe(skapp.category)
    expect(view.developer).toBe(skapp.developer)
    expect(view.blacklist).toBe(skapp.blacklist)
    expect(view.blacklist_date).toBe(skapp.blacklist_date)
    expect(view.skhub_blacklist).toBe(skapp.skhub_blacklist)
    expect(view.skhub_blacklist_date).toBe(skapp.skhub_blacklist_date)
    expect(view.portal).toBe(skapp.portal)
    expect(view.searchable).toBe(skapp.searchable)
    expect(view.ratings).toBe(skapp.ratings)
    expect(view.reviews).toBe(skapp.reviews)
    expect(view.compatibility).toBe(skapp.compatibility)
    expect(view.languages).toBe(skapp.languages)
    expect(view.age_rating).toBe(skapp.age_rating)
    expect(view.price).toBe(skapp.price)
    expect(view.app_support).toBe(skapp.app_support)
    expect(view.git_url).toBe(skapp.git_url)
    expect(view.auth_code).toBe(skapp.auth_code)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = skapp.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(skapp.id)
    expect(view.version).toBe(skapp.version)
    expect(view.skapp_id).toBe(skapp.skapp_id)
    expect(view.skylink).toBe(skapp.skylink)
    expect(view.title).toBe(skapp.title)
    expect(view.filename).toBe(skapp.filename)
    expect(view.fileformat).toBe(skapp.fileformat)
    expect(view.description).toBe(skapp.description)
    expect(view.type).toBe(skapp.type)
    expect(view.directory).toBe(skapp.directory)
    expect(view.size).toBe(skapp.size)
    expect(view.category).toBe(skapp.category)
    expect(view.developer).toBe(skapp.developer)
    expect(view.blacklist).toBe(skapp.blacklist)
    expect(view.blacklist_date).toBe(skapp.blacklist_date)
    expect(view.skhub_blacklist).toBe(skapp.skhub_blacklist)
    expect(view.skhub_blacklist_date).toBe(skapp.skhub_blacklist_date)
    expect(view.portal).toBe(skapp.portal)
    expect(view.searchable).toBe(skapp.searchable)
    expect(view.ratings).toBe(skapp.ratings)
    expect(view.reviews).toBe(skapp.reviews)
    expect(view.compatibility).toBe(skapp.compatibility)
    expect(view.languages).toBe(skapp.languages)
    expect(view.age_rating).toBe(skapp.age_rating)
    expect(view.price).toBe(skapp.price)
    expect(view.app_support).toBe(skapp.app_support)
    expect(view.git_url).toBe(skapp.git_url)
    expect(view.auth_code).toBe(skapp.auth_code)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
